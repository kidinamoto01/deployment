#!/usr/bin/python
import argparse
import subprocess
import os
import sys
from subprocess import Popen, PIPE

parser = argparse.ArgumentParser(prog='PROG')




parser.add_argument("-n", "--nodesName", help="node names, coma separated list of nodes", default="1")

parser.add_argument("-i", "--chainId", help="chain unique ID", default="TEST")
parser.add_argument("-g", "--gitrepo", help="git repository of the app", action="store_true", default="github.com/multiverseHQ/abci_sample")
parser.add_argument("-v", "--verbose", help="verbose", action="store_true", default="")


subparsers = parser.add_subparsers(dest="module",help='sub-command help')

parser_clean = subparsers.add_parser('delete', help='erase a chain')

parser_build = subparsers.add_parser('delete', help='erase a chain')

parser_create = subparsers.add_parser('create', help='create a chain')

parser_create.add_argument("-e", "--execname", help="name of the executable", default="abci_counter")
parser_create.add_argument("-f", "--args", help="name of the executable", default="")




parser_create.add_argument("-t", "--tendermintExposedPort", help="exposed tendermint ports", default="46656")
parser_create.add_argument("-p", "--proxyExposedPort", help="exposed proxy ports", default="46456")
parser_create.add_argument("-a", "--appExposedPort", help="exposed app ports", default="46256")
parser_create.add_argument("-x", "--externalConfiguration", help="configuration done distantly", action="store_true")



def get_script_path(file):
   return '{}/lib/{}'.format(os.path.dirname(os.path.realpath(__file__)),file)

args = parser.parse_args()

if args.module in ['delete'] :
   delete = Popen([get_script_path('clean')]+[args.chainId]+args.nodesName.split(","))
   delete.wait()   

if args.module in ['create'] :
   print "---------------- Create ------------------"

   tPorts = args.tendermintExposedPort.split(",")
   pPorts = args.proxyExposedPort.split(",")
   aPorts = args.appExposedPort.split(",")
   nodeNames = args.nodesName.split(",")

   for n,p,a in map(None,nodeNames, pPorts,aPorts):
      print([get_script_path('createOne')]+[args.chainId]+[n,p,a]+[args.execname,args.args])
      create = Popen([get_script_path('createOne')]+[args.chainId]+[n,p,a]+[args.execname,args.args])
      create.wait()

   sleep = Popen(['sleep','3'])
   sleep.wait()   


   print "---------------- Genesis -----------------"

   if args.externalConfiguration:
      getPubKeys = Popen(
	[get_script_path('genesisGetPubKeys')]+[args.chainId]+nodeNames,stdout=subprocess.PIPE
      )
      pubKeys = ''
      while True:
          out = getPubKeys.stdout.read(1)
          if out == '' and getPubKeys.poll() != None:
              break
          if out != '':
	      pubKeys = pubKeys + out
      genesis = Popen([get_script_path('genesisSendToTerraform')] + [ args.chainId ] + [ pubKeys ] + [ args.tendermintExposedPort ] + [ args.proxyExposedPort ] + [ args.appExposedPort ] )
      genesis.wait()

      print "--- wait4genesis from server ---"
      if args.externalConfiguration:
          wait4genesis = Popen([get_script_path('waitForGenesisReady')] + [ args.chainId ] + [ nodeNames[0] ] )
          wait4genesis.wait()
      print "--- replace proxy app in config.toml ---"
      genesisReplaceProxyApp = Popen([get_script_path('genesisReplaceProxyApp')]+[args.chainId]+nodeNames)
      genesisReplaceProxyApp.wait()

      sleep = Popen(['sleep','3'])
      sleep.wait()   



   else:
      genesis = Popen([get_script_path('genesis')]+[args.chainId]+nodeNames)
      genesis.wait()
      print "---------------- Start -----------------"
      for n,t in map(None,nodeNames, tPorts):
          start = Popen([get_script_path('startTendermint')]+[args.chainId]+[n,t])
          start.wait()

      print "---------------- Wait -----------------"
      sleep = Popen(['sleep','3'])
      sleep.wait()

      print "---------------- LAUNCH ---------------"
      enableCommunication = Popen([get_script_path('enableCommunication')]+[args.chainId]+nodeNames)
      enableCommunication.wait()



